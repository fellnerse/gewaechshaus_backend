type Mutation {
    addDevice(hostname: String!, name: String!): Device
    addDatapoint(data: Measurement!): CreatedDatapointPayload
}

type Query {
    device(hostname: String): [Device]
    datapoint(filter: DatapointsTimeRangeRequest, orderBy:OrderByUploadedAtInput): [Datapoint]
}

type Subscription {
    datapoint(hostname: String): Datapoint
}

enum SortOrder {
    asc
    desc
}

input OrderByUploadedAtInput{
    uploadedAt: SortOrder
}

scalar DateTime

input Measurement{
    humidity: Float!,
    light: Float!,
    temperature: Float!,
    uploadedAt: DateTime,
    hostname: String!
}

input DatapointsTimeRangeRequest{
    start: DateTime,
    end: DateTime,
    hostname:String
}

type Device {
    id:       Int!
    hostname: String!
    name:     String!
    data:     [Datapoint!]!
}

type Datapoint {
    id:              Int!
    createdAt:       DateTime!
    uploadedAt:      DateTime!
    device:          Device!
    humidity:        Float!
    light:           Float!
    temperature:     Float!
    uploadDay:       Int!
    uploadHour:      Int!
    uploadMinute:    Int!
    uploadSecond:    Int!
}

type CreatedDatapointPayload{
    recordID: Int,
    record: Datapoint
}